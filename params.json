{"name":"Renderjson","tagline":"Render JSON into collapsible HTML","body":"Renderjson\r\n==========\r\n\r\nRender JSON into collapsible, themeable HTML. This library aims to be very\r\nsimple with few options and no external dependencies. It's aimed at debugging\r\nbut you can use it wherever it is useful.\r\n\r\nThe code renders the JSON lazily, only building the HTML when the user\r\nreveals the JSON by clicking the disclosure icons. This makes it extremely\r\nfast to do the initial render of huge JSON objects, since the only thing\r\nthat renders initially is a single disclosure icon.\r\n\r\n\r\n\r\nLive Example\r\n------------\r\n\r\n[A live example can be found here](http://caldwell.github.io/renderjson).\r\n\r\nHere's the code:\r\n\r\n```html\r\n<div id=\"test\">\r\n<script type=\"text/javascript\" src=\"renderjson.js\"></script>\r\n<script>\r\nvar example = {\r\n    \"glossary\": {\r\n        \"title\": \"example glossary\",\r\n        \"GlossDiv\": {\r\n            \"title\": \"S\",\r\n            \"GlossList\": {\r\n                \"GlossEntry\": {\r\n                    \"ID\": \"SGML\",\r\n                    \"SortAs\": \"SGML\",\r\n                    \"GlossTerm\": \"Standard Generalized Markup Language\",\r\n                    \"Acronym\": \"SGML\",\r\n                    \"Abbrev\": \"ISO 8879:1986\",\r\n                    \"GlossDef\": {\r\n                        \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\r\n                        \"GlossSeeAlso\": [\"GML\", \"XML\"]\r\n                    },\r\n                    \"GlossSee\": \"markup\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n    document.getElementById(\"test\").appendChild(renderjson(example));\r\n</script>\r\n```\r\n\r\nAnd here's the CSS:\r\n\r\n```css\r\n.renderjson a              { text-decoration: none; }\r\n.renderjson .disclosure    { color: crimson;\r\n                             font-size: 150%; }\r\n.renderjson .syntax        { color: grey; }\r\n.renderjson .string        { color: red; }\r\n.renderjson .number        { color: cyan; }\r\n.renderjson .boolean       { color: plum; }\r\n.renderjson .key           { color: lightblue; }\r\n.renderjson .keyword       { color: lightgoldenrodyellow; }\r\n.renderjson .object.syntax { color: lightseagreen; }\r\n.renderjson .array.syntax  { color: lightsalmon; }\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nThe module exports one entry point, the `renderjson()` function. It takes in\r\nthe JSON you want to render as a single argument and returns an HTML\r\nelement.\r\n\r\nOptions\r\n-------\r\n\r\nThere are a couple functions to call to customize the output:\r\n\r\n```javascript\r\nrenderjson.set_icons('+', '-');\r\n```\r\n\r\nCall `set_icons()` to set the disclosure icons to something other than \"⊕\" and\r\n\"⊖\".\r\n\r\n```javascript\r\nrenderjson.set_show_to_level(level);\r\n```\r\n\r\nCall `set_show_to_level()` to show different amounts of the JSON by\r\ndefault. The default is `0`, and `1` is a popular choice. As a special case,\r\nif `level` is the string `\"all\"` then all the JSON will be shown by\r\ndefault. This, of course, removes the benefit of the lazy rendering, so it\r\nmay be slow with large JSON objects.\r\n\r\n```javascript\r\nrenderjson.set_max_string_length(length);\r\n```\r\n\r\nStrings will be truncated and made expandable if they are longer than\r\n`length`. As a special case, if `length` is the string `\"none\"` then there\r\nwill be no truncation. The default is `\"none\"`.\r\n\r\n```javascript\r\nrenderjson.set_sort_objects(sort_bool);\r\n```\r\n\r\nSort objects by key (default: false)\r\n\r\nThese functions are chainable so you may do:\r\n\r\n```javascript\r\nrenderjson.set_icons('+', '-')\r\n          .set_show_to_level(2)\r\n        ({ hello: [1,2,3,4], there: { a:1, b:2, c:[\"hello\", null] } })\r\n```\r\n\r\nTheming\r\n-------\r\n\r\nThe HTML output uses a number of classes so that you can theme it the way\r\nyou'd like:\r\n\r\n    .disclosure    (\"⊕\", \"⊖\")\r\n    .syntax        (\",\", \":\", \"{\", \"}\", \"[\", \"]\")\r\n    .string        (includes quotes)\r\n    .number\r\n    .boolean\r\n    .key           (object key)\r\n    .keyword       (\"null\", \"undefined\")\r\n    .object.syntax (\"{\", \"}\")\r\n    .array.syntax  (\"[\", \"]\")\r\n\r\n\r\nCopyright and License\r\n---------------------\r\n\r\nCopyright © 2013-2014 David Caldwell \\<david@porkrind.org\\>\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted, provided that the above\r\ncopyright notice and this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\r\nSPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\r\nOF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\r\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}